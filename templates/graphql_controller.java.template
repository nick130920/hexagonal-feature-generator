package ${PACKAGE}.infrastructure.adapter.input.graphql.controller;

import ${PACKAGE}.application.dto.request.${FEATURE}Request;
import ${PACKAGE}.application.dto.response.${FEATURE}Response;
import ${PACKAGE}.application.port.input.${FEATURE}UseCase;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.graphql.data.method.annotation.Argument;
import org.springframework.graphql.data.method.annotation.MutationMapping;
import org.springframework.graphql.data.method.annotation.QueryMapping;
import org.springframework.stereotype.Controller;

import java.util.List;

/**
 * GraphQL controller for ${FEATURE}.
 * <p>This controller handles GraphQL requests for the ${FEATURE} feature.</p>
 * 
 * <p>Dependencies:</p>
 * <ul>
 *   <li>${FEATURE}UseCase: Service for ${FEATURE} operations.</li>
 * </ul>
 * 
 * <p>Annotations:</p>
 * <ul>
 *   <li>@Controller: Designates this class as a web controller. </li>
 *   <li>@RequiredArgsConstructor: Generates a constructor with required arguments.</li>
 *   <li>@Slf4j: Enables logging.</li>
 * </ul>
 * 
 */
@Controller
@RequiredArgsConstructor
@Slf4j
public class ${FEATURE}GraphQlController {

	private final ${FEATURE}UseCase ${FEATURE_LOWER}UseCase;


	/**
	 * Retrieves a single ${FEATURE} by ID.
	 *
	 * @param id the ${FEATURE} ID
	 * @return the found ${FEATURE} response
	 */
	@QueryMapping
	public ${FEATURE}Response ${FEATURE_LOWER}(@Argument Long id) {
		return ${FEATURE_LOWER}UseCase.findById(id);
	}

	/**
	 * Retrieves all ${FEATURE_PLURAL}.
	 *
	 * @return the list of ${FEATURE} responses
	 */
	@QueryMapping
	public List<${FEATURE}Response> ${FEATURE_PLURAL}() {
		return ${FEATURE_LOWER}UseCase.findAll();
	}

	/**
	 * Creates a new ${FEATURE}.
	 *
	 * @param ${FEATURE_LOWER}Request the ${FEATURE} request
	 * @return the created ${FEATURE} response
	 */
	@MutationMapping
	public ${FEATURE}Response create${FEATURE}(@Argument ${FEATURE}Request ${FEATURE_LOWER}Request) {
		return ${FEATURE_LOWER}UseCase.create${FEATURE}(${FEATURE_LOWER}Request);
	}

	/**
	 * Creates multiple ${FEATURE_PLURAL}.
	 *
	 * @param ${FEATURE_LOWER}Requests the list of ${FEATURE} requests
	 * @return the list of created ${FEATURE} responses
	 */
	@MutationMapping
	public List<${FEATURE}Response> create${FEATURE_PLURAL_CAPITAL}(@Argument List<${FEATURE}Request> ${FEATURE_LOWER}Requests) {
		return ${FEATURE_LOWER}UseCase.create${FEATURE_PLURAL_CAPITAL}(${FEATURE_LOWER}Requests);
	}

	/**
	 * Updates an existing ${FEATURE}.
	 *
	 * @param ${FEATURE_LOWER}Request the ${FEATURE} request
	 * @return the updated ${FEATURE} response
	 */
	@MutationMapping
	public ${FEATURE}Response update${FEATURE}(@Argument Long id, @Argument ${FEATURE}Request ${FEATURE_LOWER}Request) {
		return ${FEATURE_LOWER}UseCase.update${FEATURE}(id, ${FEATURE_LOWER}Request);
	}

	/**
	 * Deletes a ${FEATURE} by ID.
	 *
	 * @param id the ${FEATURE} ID
	 * @return true if the ${FEATURE} was deleted, false otherwise
	 */
	@MutationMapping
	public Boolean delete${FEATURE}(@Argument Long id) {
		${FEATURE_LOWER}UseCase.deleteById(id);
		return true;
	}

}

