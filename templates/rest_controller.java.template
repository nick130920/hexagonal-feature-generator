package ${PACKAGE}.infrastructure.adapter.input.controller;

import ${PACKAGE}.application.dto.request.${FEATURE}Request;
import ${PACKAGE}.application.dto.response.${FEATURE}Response;
import ${PACKAGE}.application.port.input.${FEATURE}UseCase;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.ResponseEntity;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.web.bind.annotation.*;

import java.util.List;

 /**
 * REST controller for managing ${FEATURE} entities.
 * Offers endpoints for CRUD operations and bulk creation.
 * 
 * <p>Endpoints:</p>
 * <ul>
 *   <li>GET /api/${FEATURE_LOWER}/{id}: Retrieve an ${FEATURE} by its ID.</li>
 *   <li>GET /api/${FEATURE_LOWER}: Retrieve all ${FEATURE} entities.</li>
 *   <li>POST /api/${FEATURE_LOWER}: Create a new ${FEATURE}.</li>
 *   <li>POST /api/${FEATURE_LOWER}/bulk: Create multiple ${FEATURE} entities in bulk.</li>
 *   <li>PUT /api/${FEATURE_LOWER}/{id}: Update an existing ${FEATURE} by its ID.</li>
 *   <li>DELETE /api/${FEATURE_LOWER}/{id}: Delete an ${FEATURE} by its ID.</li>
 * </ul>
 * 
 * <p>Dependencies:</p>
 * <ul>
 *   <li>${FEATURE}UseCase: Service for ${FEATURE} operations.</li>
 * </ul>
 * 
 * <p>Annotations:</p>
 * <ul>
 *   <li>@RestController: Designates this class as a REST controller.</li>
 *   <li>@RequestMapping: Maps HTTP requests to handler methods in this controller.</li>
 *   <li>@RequiredArgsConstructor: Generates a constructor with required arguments.</li>
 *   <li>@Slf4j: Enables logging.</li>
 * </ul>
 */
@RestController
@RequestMapping("/api/${FEATURE_LOWER}")
@RequiredArgsConstructor
@Slf4j
@Tag(name = "${FEATURE}", description = "Operations related to ${FEATURE_LOWER} entities")
public class ${FEATURE}RestController {

    private final ${FEATURE}UseCase ${FEATURE_LOWER}UseCase;

    /**
     * Retrieves a ${FEATURE} by its ID.
     * 
     * @param id the ${FEATURE} ID
     * @return the found ${FEATURE} response
     */
    @GetMapping("/{id}")
    @Operation(summary = "Get a ${FEATURE} by ID", description = "Retrieves a ${FEATURE} entity by its unique ID")
    public ResponseEntity<${FEATURE}Response> get${FEATURE}(@PathVariable Long id) {
        return ResponseEntity.ok(${FEATURE_LOWER}UseCase.findById(id));
    }

    /**
     * Retrieves all ${FEATURE_PLURAL}.
     * 
     * @return the list of ${FEATURE} responses
     */
    @GetMapping
    @Operation(summary = "Get all ${FEATURE_PLURAL}", description = "Retrieves a list of all ${FEATURE} entities")
    public ResponseEntity<List<${FEATURE}Response>> getAll${FEATURE_PLURAL_CAPITAL}() {
        return ResponseEntity.ok(${FEATURE_LOWER}UseCase.findAll());
    }

    /**
     * Creates a new ${FEATURE}.
     * 
     * @param ${FEATURE_LOWER}Request the ${FEATURE} request
     * @return the created ${FEATURE} response
     */
    @PostMapping
    @Operation(summary = "Create a new ${FEATURE}", description = "Creates a new ${FEATURE} entity with the provided data")
    public ResponseEntity<${FEATURE}Response> create${FEATURE}(@RequestBody ${FEATURE}Request ${FEATURE_LOWER}Request) {
        return ResponseEntity.ok(${FEATURE_LOWER}UseCase.create${FEATURE}(${FEATURE_LOWER}Request));
    }

    /**
     * Endpoint to create multiple ${FEATURE_PLURAL} in bulk.
     * 
     * @param ${FEATURE_LOWER}Requests List of ${FEATURE}Request objects to create.
     * @return List of created ${FEATURE}Response objects.
     */
    @PostMapping("/bulk")
    @Operation(summary = "Create ${FEATURE_PLURAL} in bulk", description = "Creates multiple ${FEATURE} entities in bulk with the provided data")
    public ResponseEntity<List<${FEATURE}Response>> create${FEATURE_PLURAL_CAPITAL}(@RequestBody List<${FEATURE}Request> ${FEATURE_LOWER}Requests) {
        return ResponseEntity.ok(${FEATURE_LOWER}UseCase.create${FEATURE_PLURAL_CAPITAL}(${FEATURE_LOWER}Requests));
    }

    /**
     * Updates a ${FEATURE} by its ID.
     * 
     * @param id the ${FEATURE} ID
     * @param ${FEATURE_LOWER}Request the ${FEATURE} request
     * @return the updated ${FEATURE} response
     */
    @PutMapping("/{id}")
    @Operation(summary = "Update a ${FEATURE}", description = "Updates an existing ${FEATURE} entity with the provided data")
    public ResponseEntity<${FEATURE}Response> update${FEATURE}(@PathVariable Long id, @RequestBody ${FEATURE}Request ${FEATURE_LOWER}Request) {
        return ResponseEntity.ok(${FEATURE_LOWER}UseCase.update${FEATURE}(id, ${FEATURE_LOWER}Request));
    }

    /**
     * Deletes a ${FEATURE} by its ID.
     * 
     * @param id the ${FEATURE} ID
     * @return 204 No Content response
     */
    @DeleteMapping("/{id}")
    @Operation(summary = "Delete a ${FEATURE}", description = "Deletes a ${FEATURE} entity by its unique ID")
    public ResponseEntity<Void> delete${FEATURE}(@PathVariable Long id) {
        ${FEATURE_LOWER}UseCase.deleteById(id);
        return ResponseEntity.noContent().build();
    }
}