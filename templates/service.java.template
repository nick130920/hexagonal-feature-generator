package ${PACKAGE}.application.service;

import ${PACKAGE}.application.dto.request.${FEATURE}Request;
import ${PACKAGE}.application.dto.response.${FEATURE}Response;
import ${PACKAGE}.application.mapper.${FEATURE}Mapper;
import ${PACKAGE}.application.port.input.${FEATURE}UseCase;
import ${PACKAGE}.application.port.output.${FEATURE}RepositoryPort;
import ${PACKAGE}.application.exception.${FEATURE}NotFoundException;
import ${PACKAGE}.domain.model.${FEATURE};
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;

/**
 * Service implementation for managing ${FEATURE_PLURAL}.
 */
@Service
@RequiredArgsConstructor
public class ${FEATURE}Service implements ${FEATURE}UseCase {

    private final ${FEATURE}RepositoryPort ${FEATURE_LOWER}RepositoryPort;
    private final ${FEATURE}Mapper ${FEATURE_LOWER}Mapper;

    /**
     * Creates a new ${FEATURE_LOWER}.
     *
     * @param ${FEATURE_LOWER}Request the ${FEATURE_LOWER} request input
     * @return the created ${FEATURE_LOWER} response
     * @throws IllegalArgumentException if the request is null
     */
    @Override
    @Transactional
    public ${FEATURE}Response create${FEATURE}(${FEATURE}Request ${FEATURE_LOWER}Request) {
        if (${FEATURE_LOWER}Request == null) {
            throw new IllegalArgumentException("${FEATURE}Request cannot be null");
        }

        ${FEATURE} ${FEATURE_LOWER} = ${FEATURE_LOWER}Mapper.toEntity(${FEATURE_LOWER}Request);
        ${FEATURE_LOWER} = ${FEATURE_LOWER}RepositoryPort.save(${FEATURE_LOWER});

        return ${FEATURE_LOWER}Mapper.toDto(${FEATURE_LOWER});
    }

    /**
     * Creates multiple ${FEATURE_PLURAL}.
     *
     * @param ${FEATURE_LOWER}Requests the list of ${FEATURE_LOWER} requests
     * @return the list of created ${FEATURE_LOWER} responses
     * @throws IllegalArgumentException if the request list is null or empty
     */
    @Override
    @Transactional
    public List<${FEATURE}Response> create${FEATURE_PLURAL_CAPITAL}(List<${FEATURE}Request> ${FEATURE_LOWER}Requests) {
        if (${FEATURE_LOWER}Requests == null || ${FEATURE_LOWER}Requests.isEmpty()) {
            throw new IllegalArgumentException("${FEATURE}Requests cannot be null or empty");
        }

        List<${FEATURE}> ${FEATURE_PLURAL} = ${FEATURE_LOWER}Requests.stream()
                .map(${FEATURE_LOWER}Mapper::toEntity)
                .toList();

        ${FEATURE_PLURAL} = ${FEATURE_LOWER}RepositoryPort.saveAll(${FEATURE_PLURAL});

        return ${FEATURE_LOWER}Mapper.toDtoList(${FEATURE_PLURAL});
    }

    /**
     * Retrieves all ${FEATURE_PLURAL}.
     *
     * @return the list of ${FEATURE_LOWER} responses
     */
    @Override
    @Transactional(readOnly = true)
    public List<${FEATURE}Response> findAll() {
        return ${FEATURE_LOWER}RepositoryPort.findAll().stream()
                .map(${FEATURE_LOWER}Mapper::toDto)
                .toList();
    }

    /**
     * Finds a ${FEATURE_LOWER} by ID.
     *
     * @param id the ${FEATURE_LOWER} ID
     * @return the found ${FEATURE_LOWER} response
     * @throws ${FEATURE}NotFoundException if the ${FEATURE_LOWER} is not found
     */
    @Override
    @Transactional(readOnly = true)
    public ${FEATURE}Response findById(Long id) {
        return ${FEATURE_LOWER}RepositoryPort.findById(id)
                .map(${FEATURE_LOWER}Mapper::toDto)
                .orElseThrow(() -> new ${FEATURE}NotFoundException("${FEATURE} not found with ID: " + id));
    }

    /**
     * Updates a ${FEATURE_LOWER}.
     *
     * @param id the Address ID
     * @param request the ${FEATURE_LOWER} request
     * @return the updated ${FEATURE_LOWER} response
     * @throws ${FEATURE}NotFoundException if the ${FEATURE_LOWER} is not found
     */
    @Override
    @Transactional
    public ${FEATURE}Response update${FEATURE}(Long id, ${FEATURE}Request request) {
        ${FEATURE_LOWER}RepositoryPort.findById(id)
                .orElseThrow(() -> new ${FEATURE}NotFoundException("${FEATURE} not found with ID: " + id));


        ${FEATURE} saved = ${FEATURE_LOWER}RepositoryPort.save(${FEATURE_LOWER}Mapper.toEntity(request));

        return ${FEATURE_LOWER}Mapper.toDto(saved);
    }

    /**
     * Deletes a ${FEATURE_LOWER} by ID.
     *
     * @param id the ${FEATURE_LOWER} ID
     * @throws ${FEATURE}NotFoundException if the ${FEATURE_LOWER} is not found
     */
    @Override
    @Transactional
    public void deleteById(Long id) {
        ${FEATURE_LOWER}RepositoryPort.deleteById(id);
    }
}